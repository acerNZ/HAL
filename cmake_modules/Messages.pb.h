// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto

#ifndef PROTOBUF_Messages_2eproto__INCLUDED
#define PROTOBUF_Messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Messages_2eproto();
void protobuf_AssignDesc_Messages_2eproto();
void protobuf_ShutdownFile_Messages_2eproto();

class Path;
class Waypoints;
class Waypoint;
class RetVal;
class PublishMsg;
class Entity;
class Pose;

// ===================================================================

class Path : public ::google::protobuf::Message {
 public:
  Path();
  virtual ~Path();
  
  Path(const Path& from);
  
  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Path& default_instance();
  
  void Swap(Path* other);
  
  // implements Message ----------------------------------------------
  
  Path* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 Indices = 1 [packed = true];
  inline int indices_size() const;
  inline void clear_indices();
  static const int kIndicesFieldNumber = 1;
  inline ::google::protobuf::int32 indices(int index) const;
  inline void set_indices(int index, ::google::protobuf::int32 value);
  inline void add_indices(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      indices() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_indices();
  
  // @@protoc_insertion_point(class_scope:Path)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > indices_;
  mutable int _indices_cached_byte_size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();
  
  void InitAsDefaultInstance();
  static Path* default_instance_;
};
// -------------------------------------------------------------------

class Waypoints : public ::google::protobuf::Message {
 public:
  Waypoints();
  virtual ~Waypoints();
  
  Waypoints(const Waypoints& from);
  
  inline Waypoints& operator=(const Waypoints& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Waypoints& default_instance();
  
  void Swap(Waypoints* other);
  
  // implements Message ----------------------------------------------
  
  Waypoints* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Waypoints& from);
  void MergeFrom(const Waypoints& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Waypoint Wpoints = 1;
  inline int wpoints_size() const;
  inline void clear_wpoints();
  static const int kWpointsFieldNumber = 1;
  inline const ::Waypoint& wpoints(int index) const;
  inline ::Waypoint* mutable_wpoints(int index);
  inline ::Waypoint* add_wpoints();
  inline const ::google::protobuf::RepeatedPtrField< ::Waypoint >&
      wpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::Waypoint >*
      mutable_wpoints();
  
  // @@protoc_insertion_point(class_scope:Waypoints)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Waypoint > wpoints_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();
  
  void InitAsDefaultInstance();
  static Waypoints* default_instance_;
};
// -------------------------------------------------------------------

class Waypoint : public ::google::protobuf::Message {
 public:
  Waypoint();
  virtual ~Waypoint();
  
  Waypoint(const Waypoint& from);
  
  inline Waypoint& operator=(const Waypoint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Waypoint& default_instance();
  
  void Swap(Waypoint* other);
  
  // implements Message ----------------------------------------------
  
  Waypoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Waypoint& from);
  void MergeFrom(const Waypoint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double X = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);
  
  // optional double Y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);
  
  // optional double Theta = 3;
  inline bool has_theta() const;
  inline void clear_theta();
  static const int kThetaFieldNumber = 3;
  inline double theta() const;
  inline void set_theta(double value);
  
  // optional double Velocity = 4;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 4;
  inline double velocity() const;
  inline void set_velocity(double value);
  
  // optional double W = 5;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 5;
  inline double w() const;
  inline void set_w(double value);
  
  // @@protoc_insertion_point(class_scope:Waypoint)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_theta();
  inline void clear_has_theta();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_w();
  inline void clear_has_w();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double x_;
  double y_;
  double theta_;
  double velocity_;
  double w_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();
  
  void InitAsDefaultInstance();
  static Waypoint* default_instance_;
};
// -------------------------------------------------------------------

class RetVal : public ::google::protobuf::Message {
 public:
  RetVal();
  virtual ~RetVal();
  
  RetVal(const RetVal& from);
  
  inline RetVal& operator=(const RetVal& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RetVal& default_instance();
  
  void Swap(RetVal* other);
  
  // implements Message ----------------------------------------------
  
  RetVal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetVal& from);
  void MergeFrom(const RetVal& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool Val = 1;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 1;
  inline bool val() const;
  inline void set_val(bool value);
  
  // @@protoc_insertion_point(class_scope:RetVal)
 private:
  inline void set_has_val();
  inline void clear_has_val();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool val_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();
  
  void InitAsDefaultInstance();
  static RetVal* default_instance_;
};
// -------------------------------------------------------------------

class PublishMsg : public ::google::protobuf::Message {
 public:
  PublishMsg();
  virtual ~PublishMsg();
  
  PublishMsg(const PublishMsg& from);
  
  inline PublishMsg& operator=(const PublishMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishMsg& default_instance();
  
  void Swap(PublishMsg* other);
  
  // implements Message ----------------------------------------------
  
  PublishMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PublishMsg& from);
  void MergeFrom(const PublishMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Entity Name = 1;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::Entity& name(int index) const;
  inline ::Entity* mutable_name(int index);
  inline ::Entity* add_name();
  inline const ::google::protobuf::RepeatedPtrField< ::Entity >&
      name() const;
  inline ::google::protobuf::RepeatedPtrField< ::Entity >*
      mutable_name();
  
  // optional string LocType = 2;
  inline bool has_loctype() const;
  inline void clear_loctype();
  static const int kLocTypeFieldNumber = 2;
  inline const ::std::string& loctype() const;
  inline void set_loctype(const ::std::string& value);
  inline void set_loctype(const char* value);
  inline void set_loctype(const char* value, size_t size);
  inline ::std::string* mutable_loctype();
  inline ::std::string* release_loctype();
  
  // optional double Velocity = 3;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  inline double velocity() const;
  inline void set_velocity(double value);
  
  // @@protoc_insertion_point(class_scope:PublishMsg)
 private:
  inline void set_has_loctype();
  inline void clear_has_loctype();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Entity > name_;
  ::std::string* loctype_;
  double velocity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();
  
  void InitAsDefaultInstance();
  static PublishMsg* default_instance_;
};
// -------------------------------------------------------------------

class Entity : public ::google::protobuf::Message {
 public:
  Entity();
  virtual ~Entity();
  
  Entity(const Entity& from);
  
  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Entity& default_instance();
  
  void Swap(Entity* other);
  
  // implements Message ----------------------------------------------
  
  Entity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional .Pose Pose = 2;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 2;
  inline const ::Pose& pose() const;
  inline ::Pose* mutable_pose();
  inline ::Pose* release_pose();
  
  // @@protoc_insertion_point(class_scope:Entity)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pose();
  inline void clear_has_pose();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::Pose* pose_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();
  
  void InitAsDefaultInstance();
  static Entity* default_instance_;
};
// -------------------------------------------------------------------

class Pose : public ::google::protobuf::Message {
 public:
  Pose();
  virtual ~Pose();
  
  Pose(const Pose& from);
  
  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose& default_instance();
  
  void Swap(Pose* other);
  
  // implements Message ----------------------------------------------
  
  Pose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double X = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);
  
  // optional double Y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);
  
  // optional double Z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);
  
  // optional double Roll = 4;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 4;
  inline double roll() const;
  inline void set_roll(double value);
  
  // optional double Pitch = 5;
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 5;
  inline double pitch() const;
  inline void set_pitch(double value);
  
  // optional double Yaw = 6;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 6;
  inline double yaw() const;
  inline void set_yaw(double value);
  
  // @@protoc_insertion_point(class_scope:Pose)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_roll();
  inline void clear_has_roll();
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_yaw();
  inline void clear_has_yaw();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double x_;
  double y_;
  double z_;
  double roll_;
  double pitch_;
  double yaw_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Messages_2eproto();
  friend void protobuf_AssignDesc_Messages_2eproto();
  friend void protobuf_ShutdownFile_Messages_2eproto();
  
  void InitAsDefaultInstance();
  static Pose* default_instance_;
};
// ===================================================================


// ===================================================================

// Path

// repeated int32 Indices = 1 [packed = true];
inline int Path::indices_size() const {
  return indices_.size();
}
inline void Path::clear_indices() {
  indices_.Clear();
}
inline ::google::protobuf::int32 Path::indices(int index) const {
  return indices_.Get(index);
}
inline void Path::set_indices(int index, ::google::protobuf::int32 value) {
  indices_.Set(index, value);
}
inline void Path::add_indices(::google::protobuf::int32 value) {
  indices_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Path::indices() const {
  return indices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Path::mutable_indices() {
  return &indices_;
}

// -------------------------------------------------------------------

// Waypoints

// repeated .Waypoint Wpoints = 1;
inline int Waypoints::wpoints_size() const {
  return wpoints_.size();
}
inline void Waypoints::clear_wpoints() {
  wpoints_.Clear();
}
inline const ::Waypoint& Waypoints::wpoints(int index) const {
  return wpoints_.Get(index);
}
inline ::Waypoint* Waypoints::mutable_wpoints(int index) {
  return wpoints_.Mutable(index);
}
inline ::Waypoint* Waypoints::add_wpoints() {
  return wpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Waypoint >&
Waypoints::wpoints() const {
  return wpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::Waypoint >*
Waypoints::mutable_wpoints() {
  return &wpoints_;
}

// -------------------------------------------------------------------

// Waypoint

// optional double X = 1;
inline bool Waypoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Waypoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Waypoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Waypoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Waypoint::x() const {
  return x_;
}
inline void Waypoint::set_x(double value) {
  set_has_x();
  x_ = value;
}

// optional double Y = 2;
inline bool Waypoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Waypoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Waypoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Waypoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Waypoint::y() const {
  return y_;
}
inline void Waypoint::set_y(double value) {
  set_has_y();
  y_ = value;
}

// optional double Theta = 3;
inline bool Waypoint::has_theta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Waypoint::set_has_theta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Waypoint::clear_has_theta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Waypoint::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline double Waypoint::theta() const {
  return theta_;
}
inline void Waypoint::set_theta(double value) {
  set_has_theta();
  theta_ = value;
}

// optional double Velocity = 4;
inline bool Waypoint::has_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Waypoint::set_has_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Waypoint::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Waypoint::clear_velocity() {
  velocity_ = 0;
  clear_has_velocity();
}
inline double Waypoint::velocity() const {
  return velocity_;
}
inline void Waypoint::set_velocity(double value) {
  set_has_velocity();
  velocity_ = value;
}

// optional double W = 5;
inline bool Waypoint::has_w() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Waypoint::set_has_w() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Waypoint::clear_has_w() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Waypoint::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline double Waypoint::w() const {
  return w_;
}
inline void Waypoint::set_w(double value) {
  set_has_w();
  w_ = value;
}

// -------------------------------------------------------------------

// RetVal

// required bool Val = 1;
inline bool RetVal::has_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetVal::set_has_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetVal::clear_has_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetVal::clear_val() {
  val_ = false;
  clear_has_val();
}
inline bool RetVal::val() const {
  return val_;
}
inline void RetVal::set_val(bool value) {
  set_has_val();
  val_ = value;
}

// -------------------------------------------------------------------

// PublishMsg

// repeated .Entity Name = 1;
inline int PublishMsg::name_size() const {
  return name_.size();
}
inline void PublishMsg::clear_name() {
  name_.Clear();
}
inline const ::Entity& PublishMsg::name(int index) const {
  return name_.Get(index);
}
inline ::Entity* PublishMsg::mutable_name(int index) {
  return name_.Mutable(index);
}
inline ::Entity* PublishMsg::add_name() {
  return name_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Entity >&
PublishMsg::name() const {
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::Entity >*
PublishMsg::mutable_name() {
  return &name_;
}

// optional string LocType = 2;
inline bool PublishMsg::has_loctype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublishMsg::set_has_loctype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublishMsg::clear_has_loctype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublishMsg::clear_loctype() {
  if (loctype_ != &::google::protobuf::internal::kEmptyString) {
    loctype_->clear();
  }
  clear_has_loctype();
}
inline const ::std::string& PublishMsg::loctype() const {
  return *loctype_;
}
inline void PublishMsg::set_loctype(const ::std::string& value) {
  set_has_loctype();
  if (loctype_ == &::google::protobuf::internal::kEmptyString) {
    loctype_ = new ::std::string;
  }
  loctype_->assign(value);
}
inline void PublishMsg::set_loctype(const char* value) {
  set_has_loctype();
  if (loctype_ == &::google::protobuf::internal::kEmptyString) {
    loctype_ = new ::std::string;
  }
  loctype_->assign(value);
}
inline void PublishMsg::set_loctype(const char* value, size_t size) {
  set_has_loctype();
  if (loctype_ == &::google::protobuf::internal::kEmptyString) {
    loctype_ = new ::std::string;
  }
  loctype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PublishMsg::mutable_loctype() {
  set_has_loctype();
  if (loctype_ == &::google::protobuf::internal::kEmptyString) {
    loctype_ = new ::std::string;
  }
  return loctype_;
}
inline ::std::string* PublishMsg::release_loctype() {
  clear_has_loctype();
  if (loctype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = loctype_;
    loctype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double Velocity = 3;
inline bool PublishMsg::has_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PublishMsg::set_has_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PublishMsg::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PublishMsg::clear_velocity() {
  velocity_ = 0;
  clear_has_velocity();
}
inline double PublishMsg::velocity() const {
  return velocity_;
}
inline void PublishMsg::set_velocity(double value) {
  set_has_velocity();
  velocity_ = value;
}

// -------------------------------------------------------------------

// Entity

// optional string Name = 1;
inline bool Entity::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Entity::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Entity::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Entity::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Entity::name() const {
  return *name_;
}
inline void Entity::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Entity::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Entity::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Entity::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Entity::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .Pose Pose = 2;
inline bool Entity::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Entity::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Entity::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Entity::clear_pose() {
  if (pose_ != NULL) pose_->::Pose::Clear();
  clear_has_pose();
}
inline const ::Pose& Entity::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::Pose* Entity::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::Pose;
  return pose_;
}
inline ::Pose* Entity::release_pose() {
  clear_has_pose();
  ::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Pose

// optional double X = 1;
inline bool Pose::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pose::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pose::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pose::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Pose::x() const {
  return x_;
}
inline void Pose::set_x(double value) {
  set_has_x();
  x_ = value;
}

// optional double Y = 2;
inline bool Pose::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pose::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pose::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pose::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Pose::y() const {
  return y_;
}
inline void Pose::set_y(double value) {
  set_has_y();
  y_ = value;
}

// optional double Z = 3;
inline bool Pose::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pose::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pose::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pose::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Pose::z() const {
  return z_;
}
inline void Pose::set_z(double value) {
  set_has_z();
  z_ = value;
}

// optional double Roll = 4;
inline bool Pose::has_roll() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Pose::set_has_roll() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Pose::clear_has_roll() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Pose::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline double Pose::roll() const {
  return roll_;
}
inline void Pose::set_roll(double value) {
  set_has_roll();
  roll_ = value;
}

// optional double Pitch = 5;
inline bool Pose::has_pitch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Pose::set_has_pitch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Pose::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Pose::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline double Pose::pitch() const {
  return pitch_;
}
inline void Pose::set_pitch(double value) {
  set_has_pitch();
  pitch_ = value;
}

// optional double Yaw = 6;
inline bool Pose::has_yaw() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Pose::set_has_yaw() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Pose::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Pose::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline double Pose::yaw() const {
  return yaw_;
}
inline void Pose::set_yaw(double value) {
  set_has_yaw();
  yaw_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Messages_2eproto__INCLUDED
