// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osm.proto

#ifndef PROTOBUF_osm_2eproto__INCLUDED
#define PROTOBUF_osm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace osm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_osm_2eproto();
void protobuf_AssignDesc_osm_2eproto();
void protobuf_ShutdownFile_osm_2eproto();

class bounds;
class tag;
class node;
class way;
class role;
class relation;

// ===================================================================

class bounds : public ::google::protobuf::Message {
 public:
  bounds();
  virtual ~bounds();

  bounds(const bounds& from);

  inline bounds& operator=(const bounds& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bounds& default_instance();

  void Swap(bounds* other);

  // implements Message ----------------------------------------------

  bounds* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bounds& from);
  void MergeFrom(const bounds& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double minlat = 1;
  inline bool has_minlat() const;
  inline void clear_minlat();
  static const int kMinlatFieldNumber = 1;
  inline double minlat() const;
  inline void set_minlat(double value);

  // required double minlon = 2;
  inline bool has_minlon() const;
  inline void clear_minlon();
  static const int kMinlonFieldNumber = 2;
  inline double minlon() const;
  inline void set_minlon(double value);

  // required double maxlat = 3;
  inline bool has_maxlat() const;
  inline void clear_maxlat();
  static const int kMaxlatFieldNumber = 3;
  inline double maxlat() const;
  inline void set_maxlat(double value);

  // required double maxlon = 4;
  inline bool has_maxlon() const;
  inline void clear_maxlon();
  static const int kMaxlonFieldNumber = 4;
  inline double maxlon() const;
  inline void set_maxlon(double value);

  // @@protoc_insertion_point(class_scope:osm.bounds)
 private:
  inline void set_has_minlat();
  inline void clear_has_minlat();
  inline void set_has_minlon();
  inline void clear_has_minlon();
  inline void set_has_maxlat();
  inline void clear_has_maxlat();
  inline void set_has_maxlon();
  inline void clear_has_maxlon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double minlat_;
  double minlon_;
  double maxlat_;
  double maxlon_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_osm_2eproto();
  friend void protobuf_AssignDesc_osm_2eproto();
  friend void protobuf_ShutdownFile_osm_2eproto();

  void InitAsDefaultInstance();
  static bounds* default_instance_;
};
// -------------------------------------------------------------------

class tag : public ::google::protobuf::Message {
 public:
  tag();
  virtual ~tag();

  tag(const tag& from);

  inline tag& operator=(const tag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tag& default_instance();

  void Swap(tag* other);

  // implements Message ----------------------------------------------

  tag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tag& from);
  void MergeFrom(const tag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const char* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  inline void set_allocated_val(::std::string* val);

  // @@protoc_insertion_point(class_scope:osm.tag)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_osm_2eproto();
  friend void protobuf_AssignDesc_osm_2eproto();
  friend void protobuf_ShutdownFile_osm_2eproto();

  void InitAsDefaultInstance();
  static tag* default_instance_;
};
// -------------------------------------------------------------------

class node : public ::google::protobuf::Message {
 public:
  node();
  virtual ~node();

  node(const node& from);

  inline node& operator=(const node& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const node& default_instance();

  void Swap(node* other);

  // implements Message ----------------------------------------------

  node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const node& from);
  void MergeFrom(const node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required double lat = 2;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 2;
  inline double lat() const;
  inline void set_lat(double value);

  // required double lon = 3;
  inline bool has_lon() const;
  inline void clear_lon();
  static const int kLonFieldNumber = 3;
  inline double lon() const;
  inline void set_lon(double value);

  // optional double alt = 4;
  inline bool has_alt() const;
  inline void clear_alt();
  static const int kAltFieldNumber = 4;
  inline double alt() const;
  inline void set_alt(double value);

  // optional string user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional int32 uid = 6;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 6;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional bool visible = 7;
  inline bool has_visible() const;
  inline void clear_visible();
  static const int kVisibleFieldNumber = 7;
  inline bool visible() const;
  inline void set_visible(bool value);

  // optional int32 version = 8;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 8;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional int32 changeset = 9;
  inline bool has_changeset() const;
  inline void clear_changeset();
  static const int kChangesetFieldNumber = 9;
  inline ::google::protobuf::int32 changeset() const;
  inline void set_changeset(::google::protobuf::int32 value);

  // optional string timestamp = 10;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 10;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // repeated .osm.tag tags = 11;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 11;
  inline const ::osm::tag& tags(int index) const;
  inline ::osm::tag* mutable_tags(int index);
  inline ::osm::tag* add_tags();
  inline const ::google::protobuf::RepeatedPtrField< ::osm::tag >&
      tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::osm::tag >*
      mutable_tags();

  // @@protoc_insertion_point(class_scope:osm.node)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lon();
  inline void clear_has_lon();
  inline void set_has_alt();
  inline void clear_has_alt();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_visible();
  inline void clear_has_visible();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_changeset();
  inline void clear_has_changeset();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double lat_;
  double lon_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 uid_;
  double alt_;
  ::std::string* user_;
  bool visible_;
  ::google::protobuf::int32 version_;
  ::std::string* timestamp_;
  ::google::protobuf::RepeatedPtrField< ::osm::tag > tags_;
  ::google::protobuf::int32 changeset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_osm_2eproto();
  friend void protobuf_AssignDesc_osm_2eproto();
  friend void protobuf_ShutdownFile_osm_2eproto();

  void InitAsDefaultInstance();
  static node* default_instance_;
};
// -------------------------------------------------------------------

class way : public ::google::protobuf::Message {
 public:
  way();
  virtual ~way();

  way(const way& from);

  inline way& operator=(const way& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const way& default_instance();

  void Swap(way* other);

  // implements Message ----------------------------------------------

  way* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const way& from);
  void MergeFrom(const way& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional int32 uid = 6;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 6;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional bool visible = 7;
  inline bool has_visible() const;
  inline void clear_visible();
  static const int kVisibleFieldNumber = 7;
  inline bool visible() const;
  inline void set_visible(bool value);

  // optional int32 version = 8;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 8;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional int32 changeset = 9;
  inline bool has_changeset() const;
  inline void clear_changeset();
  static const int kChangesetFieldNumber = 9;
  inline ::google::protobuf::int32 changeset() const;
  inline void set_changeset(::google::protobuf::int32 value);

  // optional string timestamp = 10;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 10;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // repeated int32 nodes = 11;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 11;
  inline ::google::protobuf::int32 nodes(int index) const;
  inline void set_nodes(int index, ::google::protobuf::int32 value);
  inline void add_nodes(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nodes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nodes();

  // repeated .osm.tag tags = 12;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 12;
  inline const ::osm::tag& tags(int index) const;
  inline ::osm::tag* mutable_tags(int index);
  inline ::osm::tag* add_tags();
  inline const ::google::protobuf::RepeatedPtrField< ::osm::tag >&
      tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::osm::tag >*
      mutable_tags();

  // @@protoc_insertion_point(class_scope:osm.way)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_visible();
  inline void clear_has_visible();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_changeset();
  inline void clear_has_changeset();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 uid_;
  bool visible_;
  ::google::protobuf::int32 version_;
  ::std::string* timestamp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nodes_;
  ::google::protobuf::RepeatedPtrField< ::osm::tag > tags_;
  ::google::protobuf::int32 changeset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_osm_2eproto();
  friend void protobuf_AssignDesc_osm_2eproto();
  friend void protobuf_ShutdownFile_osm_2eproto();

  void InitAsDefaultInstance();
  static way* default_instance_;
};
// -------------------------------------------------------------------

class role : public ::google::protobuf::Message {
 public:
  role();
  virtual ~role();

  role(const role& from);

  inline role& operator=(const role& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role& default_instance();

  void Swap(role* other);

  // implements Message ----------------------------------------------

  role* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role& from);
  void MergeFrom(const role& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string feature = 2;
  inline bool has_feature() const;
  inline void clear_feature();
  static const int kFeatureFieldNumber = 2;
  inline const ::std::string& feature() const;
  inline void set_feature(const ::std::string& value);
  inline void set_feature(const char* value);
  inline void set_feature(const char* value, size_t size);
  inline ::std::string* mutable_feature();
  inline ::std::string* release_feature();
  inline void set_allocated_feature(::std::string* feature);

  // @@protoc_insertion_point(class_scope:osm.role)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_feature();
  inline void clear_has_feature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* feature_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_osm_2eproto();
  friend void protobuf_AssignDesc_osm_2eproto();
  friend void protobuf_ShutdownFile_osm_2eproto();

  void InitAsDefaultInstance();
  static role* default_instance_;
};
// -------------------------------------------------------------------

class relation : public ::google::protobuf::Message {
 public:
  relation();
  virtual ~relation();

  relation(const relation& from);

  inline relation& operator=(const relation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const relation& default_instance();

  void Swap(relation* other);

  // implements Message ----------------------------------------------

  relation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const relation& from);
  void MergeFrom(const relation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional int32 uid = 6;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 6;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);

  // optional bool visible = 7;
  inline bool has_visible() const;
  inline void clear_visible();
  static const int kVisibleFieldNumber = 7;
  inline bool visible() const;
  inline void set_visible(bool value);

  // optional int32 version = 8;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 8;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional int32 changeset = 9;
  inline bool has_changeset() const;
  inline void clear_changeset();
  static const int kChangesetFieldNumber = 9;
  inline ::google::protobuf::int32 changeset() const;
  inline void set_changeset(::google::protobuf::int32 value);

  // optional string timestamp = 10;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 10;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // repeated .osm.tag tags = 11;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 11;
  inline const ::osm::tag& tags(int index) const;
  inline ::osm::tag* mutable_tags(int index);
  inline ::osm::tag* add_tags();
  inline const ::google::protobuf::RepeatedPtrField< ::osm::tag >&
      tags() const;
  inline ::google::protobuf::RepeatedPtrField< ::osm::tag >*
      mutable_tags();

  // repeated .osm.node member_nodes = 12;
  inline int member_nodes_size() const;
  inline void clear_member_nodes();
  static const int kMemberNodesFieldNumber = 12;
  inline const ::osm::node& member_nodes(int index) const;
  inline ::osm::node* mutable_member_nodes(int index);
  inline ::osm::node* add_member_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::osm::node >&
      member_nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::osm::node >*
      mutable_member_nodes();

  // repeated .osm.way member_ways = 13;
  inline int member_ways_size() const;
  inline void clear_member_ways();
  static const int kMemberWaysFieldNumber = 13;
  inline const ::osm::way& member_ways(int index) const;
  inline ::osm::way* mutable_member_ways(int index);
  inline ::osm::way* add_member_ways();
  inline const ::google::protobuf::RepeatedPtrField< ::osm::way >&
      member_ways() const;
  inline ::google::protobuf::RepeatedPtrField< ::osm::way >*
      mutable_member_ways();

  // repeated .osm.role node_roles = 14;
  inline int node_roles_size() const;
  inline void clear_node_roles();
  static const int kNodeRolesFieldNumber = 14;
  inline const ::osm::role& node_roles(int index) const;
  inline ::osm::role* mutable_node_roles(int index);
  inline ::osm::role* add_node_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::osm::role >&
      node_roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::osm::role >*
      mutable_node_roles();

  // repeated .osm.role way_roles = 15;
  inline int way_roles_size() const;
  inline void clear_way_roles();
  static const int kWayRolesFieldNumber = 15;
  inline const ::osm::role& way_roles(int index) const;
  inline ::osm::role* mutable_way_roles(int index);
  inline ::osm::role* add_way_roles();
  inline const ::google::protobuf::RepeatedPtrField< ::osm::role >&
      way_roles() const;
  inline ::google::protobuf::RepeatedPtrField< ::osm::role >*
      mutable_way_roles();

  // @@protoc_insertion_point(class_scope:osm.relation)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_visible();
  inline void clear_has_visible();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_changeset();
  inline void clear_has_changeset();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 uid_;
  bool visible_;
  ::google::protobuf::int32 version_;
  ::std::string* timestamp_;
  ::google::protobuf::RepeatedPtrField< ::osm::tag > tags_;
  ::google::protobuf::RepeatedPtrField< ::osm::node > member_nodes_;
  ::google::protobuf::RepeatedPtrField< ::osm::way > member_ways_;
  ::google::protobuf::RepeatedPtrField< ::osm::role > node_roles_;
  ::google::protobuf::RepeatedPtrField< ::osm::role > way_roles_;
  ::google::protobuf::int32 changeset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_osm_2eproto();
  friend void protobuf_AssignDesc_osm_2eproto();
  friend void protobuf_ShutdownFile_osm_2eproto();

  void InitAsDefaultInstance();
  static relation* default_instance_;
};
// ===================================================================


// ===================================================================

// bounds

// required double minlat = 1;
inline bool bounds::has_minlat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bounds::set_has_minlat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bounds::clear_has_minlat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bounds::clear_minlat() {
  minlat_ = 0;
  clear_has_minlat();
}
inline double bounds::minlat() const {
  return minlat_;
}
inline void bounds::set_minlat(double value) {
  set_has_minlat();
  minlat_ = value;
}

// required double minlon = 2;
inline bool bounds::has_minlon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bounds::set_has_minlon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bounds::clear_has_minlon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bounds::clear_minlon() {
  minlon_ = 0;
  clear_has_minlon();
}
inline double bounds::minlon() const {
  return minlon_;
}
inline void bounds::set_minlon(double value) {
  set_has_minlon();
  minlon_ = value;
}

// required double maxlat = 3;
inline bool bounds::has_maxlat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bounds::set_has_maxlat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bounds::clear_has_maxlat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bounds::clear_maxlat() {
  maxlat_ = 0;
  clear_has_maxlat();
}
inline double bounds::maxlat() const {
  return maxlat_;
}
inline void bounds::set_maxlat(double value) {
  set_has_maxlat();
  maxlat_ = value;
}

// required double maxlon = 4;
inline bool bounds::has_maxlon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void bounds::set_has_maxlon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void bounds::clear_has_maxlon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void bounds::clear_maxlon() {
  maxlon_ = 0;
  clear_has_maxlon();
}
inline double bounds::maxlon() const {
  return maxlon_;
}
inline void bounds::set_maxlon(double value) {
  set_has_maxlon();
  maxlon_ = value;
}

// -------------------------------------------------------------------

// tag

// required string key = 1;
inline bool tag::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tag::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tag::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tag::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& tag::key() const {
  return *key_;
}
inline void tag::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void tag::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void tag::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tag::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* tag::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tag::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string val = 2;
inline bool tag::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tag::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tag::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tag::clear_val() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    val_->clear();
  }
  clear_has_val();
}
inline const ::std::string& tag::val() const {
  return *val_;
}
inline void tag::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void tag::set_val(const char* value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void tag::set_val(const char* value, size_t size) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tag::mutable_val() {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  return val_;
}
inline ::std::string* tag::release_val() {
  clear_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tag::set_allocated_val(::std::string* val) {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (val) {
    set_has_val();
    val_ = val;
  } else {
    clear_has_val();
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// node

// required int32 id = 1;
inline bool node::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void node::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void node::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void node::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 node::id() const {
  return id_;
}
inline void node::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required double lat = 2;
inline bool node::has_lat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void node::set_has_lat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void node::clear_has_lat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void node::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double node::lat() const {
  return lat_;
}
inline void node::set_lat(double value) {
  set_has_lat();
  lat_ = value;
}

// required double lon = 3;
inline bool node::has_lon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void node::set_has_lon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void node::clear_has_lon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void node::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline double node::lon() const {
  return lon_;
}
inline void node::set_lon(double value) {
  set_has_lon();
  lon_ = value;
}

// optional double alt = 4;
inline bool node::has_alt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void node::set_has_alt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void node::clear_has_alt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void node::clear_alt() {
  alt_ = 0;
  clear_has_alt();
}
inline double node::alt() const {
  return alt_;
}
inline void node::set_alt(double value) {
  set_has_alt();
  alt_ = value;
}

// optional string user = 5;
inline bool node::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void node::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void node::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void node::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& node::user() const {
  return *user_;
}
inline void node::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void node::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void node::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* node::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* node::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void node::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 uid = 6;
inline bool node::has_uid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void node::set_has_uid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void node::clear_has_uid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void node::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 node::uid() const {
  return uid_;
}
inline void node::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional bool visible = 7;
inline bool node::has_visible() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void node::set_has_visible() {
  _has_bits_[0] |= 0x00000040u;
}
inline void node::clear_has_visible() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void node::clear_visible() {
  visible_ = false;
  clear_has_visible();
}
inline bool node::visible() const {
  return visible_;
}
inline void node::set_visible(bool value) {
  set_has_visible();
  visible_ = value;
}

// optional int32 version = 8;
inline bool node::has_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void node::set_has_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void node::clear_has_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void node::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 node::version() const {
  return version_;
}
inline void node::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional int32 changeset = 9;
inline bool node::has_changeset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void node::set_has_changeset() {
  _has_bits_[0] |= 0x00000100u;
}
inline void node::clear_has_changeset() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void node::clear_changeset() {
  changeset_ = 0;
  clear_has_changeset();
}
inline ::google::protobuf::int32 node::changeset() const {
  return changeset_;
}
inline void node::set_changeset(::google::protobuf::int32 value) {
  set_has_changeset();
  changeset_ = value;
}

// optional string timestamp = 10;
inline bool node::has_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void node::set_has_timestamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void node::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void node::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& node::timestamp() const {
  return *timestamp_;
}
inline void node::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void node::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void node::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* node::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* node::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void node::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .osm.tag tags = 11;
inline int node::tags_size() const {
  return tags_.size();
}
inline void node::clear_tags() {
  tags_.Clear();
}
inline const ::osm::tag& node::tags(int index) const {
  return tags_.Get(index);
}
inline ::osm::tag* node::mutable_tags(int index) {
  return tags_.Mutable(index);
}
inline ::osm::tag* node::add_tags() {
  return tags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::osm::tag >&
node::tags() const {
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::osm::tag >*
node::mutable_tags() {
  return &tags_;
}

// -------------------------------------------------------------------

// way

// required int32 id = 1;
inline bool way::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void way::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void way::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void way::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 way::id() const {
  return id_;
}
inline void way::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string user = 5;
inline bool way::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void way::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void way::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void way::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& way::user() const {
  return *user_;
}
inline void way::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void way::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void way::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* way::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* way::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void way::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 uid = 6;
inline bool way::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void way::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void way::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void way::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 way::uid() const {
  return uid_;
}
inline void way::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional bool visible = 7;
inline bool way::has_visible() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void way::set_has_visible() {
  _has_bits_[0] |= 0x00000008u;
}
inline void way::clear_has_visible() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void way::clear_visible() {
  visible_ = false;
  clear_has_visible();
}
inline bool way::visible() const {
  return visible_;
}
inline void way::set_visible(bool value) {
  set_has_visible();
  visible_ = value;
}

// optional int32 version = 8;
inline bool way::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void way::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void way::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void way::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 way::version() const {
  return version_;
}
inline void way::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional int32 changeset = 9;
inline bool way::has_changeset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void way::set_has_changeset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void way::clear_has_changeset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void way::clear_changeset() {
  changeset_ = 0;
  clear_has_changeset();
}
inline ::google::protobuf::int32 way::changeset() const {
  return changeset_;
}
inline void way::set_changeset(::google::protobuf::int32 value) {
  set_has_changeset();
  changeset_ = value;
}

// optional string timestamp = 10;
inline bool way::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void way::set_has_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void way::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void way::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& way::timestamp() const {
  return *timestamp_;
}
inline void way::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void way::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void way::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* way::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* way::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void way::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 nodes = 11;
inline int way::nodes_size() const {
  return nodes_.size();
}
inline void way::clear_nodes() {
  nodes_.Clear();
}
inline ::google::protobuf::int32 way::nodes(int index) const {
  return nodes_.Get(index);
}
inline void way::set_nodes(int index, ::google::protobuf::int32 value) {
  nodes_.Set(index, value);
}
inline void way::add_nodes(::google::protobuf::int32 value) {
  nodes_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
way::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
way::mutable_nodes() {
  return &nodes_;
}

// repeated .osm.tag tags = 12;
inline int way::tags_size() const {
  return tags_.size();
}
inline void way::clear_tags() {
  tags_.Clear();
}
inline const ::osm::tag& way::tags(int index) const {
  return tags_.Get(index);
}
inline ::osm::tag* way::mutable_tags(int index) {
  return tags_.Mutable(index);
}
inline ::osm::tag* way::add_tags() {
  return tags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::osm::tag >&
way::tags() const {
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::osm::tag >*
way::mutable_tags() {
  return &tags_;
}

// -------------------------------------------------------------------

// role

// required int32 id = 1;
inline bool role::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 role::id() const {
  return id_;
}
inline void role::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string feature = 2;
inline bool role::has_feature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role::set_has_feature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role::clear_has_feature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role::clear_feature() {
  if (feature_ != &::google::protobuf::internal::kEmptyString) {
    feature_->clear();
  }
  clear_has_feature();
}
inline const ::std::string& role::feature() const {
  return *feature_;
}
inline void role::set_feature(const ::std::string& value) {
  set_has_feature();
  if (feature_ == &::google::protobuf::internal::kEmptyString) {
    feature_ = new ::std::string;
  }
  feature_->assign(value);
}
inline void role::set_feature(const char* value) {
  set_has_feature();
  if (feature_ == &::google::protobuf::internal::kEmptyString) {
    feature_ = new ::std::string;
  }
  feature_->assign(value);
}
inline void role::set_feature(const char* value, size_t size) {
  set_has_feature();
  if (feature_ == &::google::protobuf::internal::kEmptyString) {
    feature_ = new ::std::string;
  }
  feature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role::mutable_feature() {
  set_has_feature();
  if (feature_ == &::google::protobuf::internal::kEmptyString) {
    feature_ = new ::std::string;
  }
  return feature_;
}
inline ::std::string* role::release_feature() {
  clear_has_feature();
  if (feature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = feature_;
    feature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role::set_allocated_feature(::std::string* feature) {
  if (feature_ != &::google::protobuf::internal::kEmptyString) {
    delete feature_;
  }
  if (feature) {
    set_has_feature();
    feature_ = feature;
  } else {
    clear_has_feature();
    feature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// relation

// required int32 id = 1;
inline bool relation::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void relation::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void relation::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void relation::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 relation::id() const {
  return id_;
}
inline void relation::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string user = 5;
inline bool relation::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void relation::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void relation::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void relation::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& relation::user() const {
  return *user_;
}
inline void relation::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void relation::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void relation::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* relation::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* relation::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void relation::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 uid = 6;
inline bool relation::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void relation::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void relation::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void relation::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 relation::uid() const {
  return uid_;
}
inline void relation::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional bool visible = 7;
inline bool relation::has_visible() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void relation::set_has_visible() {
  _has_bits_[0] |= 0x00000008u;
}
inline void relation::clear_has_visible() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void relation::clear_visible() {
  visible_ = false;
  clear_has_visible();
}
inline bool relation::visible() const {
  return visible_;
}
inline void relation::set_visible(bool value) {
  set_has_visible();
  visible_ = value;
}

// optional int32 version = 8;
inline bool relation::has_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void relation::set_has_version() {
  _has_bits_[0] |= 0x00000010u;
}
inline void relation::clear_has_version() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void relation::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 relation::version() const {
  return version_;
}
inline void relation::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional int32 changeset = 9;
inline bool relation::has_changeset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void relation::set_has_changeset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void relation::clear_has_changeset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void relation::clear_changeset() {
  changeset_ = 0;
  clear_has_changeset();
}
inline ::google::protobuf::int32 relation::changeset() const {
  return changeset_;
}
inline void relation::set_changeset(::google::protobuf::int32 value) {
  set_has_changeset();
  changeset_ = value;
}

// optional string timestamp = 10;
inline bool relation::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void relation::set_has_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void relation::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void relation::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& relation::timestamp() const {
  return *timestamp_;
}
inline void relation::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void relation::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void relation::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* relation::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* relation::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void relation::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .osm.tag tags = 11;
inline int relation::tags_size() const {
  return tags_.size();
}
inline void relation::clear_tags() {
  tags_.Clear();
}
inline const ::osm::tag& relation::tags(int index) const {
  return tags_.Get(index);
}
inline ::osm::tag* relation::mutable_tags(int index) {
  return tags_.Mutable(index);
}
inline ::osm::tag* relation::add_tags() {
  return tags_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::osm::tag >&
relation::tags() const {
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::osm::tag >*
relation::mutable_tags() {
  return &tags_;
}

// repeated .osm.node member_nodes = 12;
inline int relation::member_nodes_size() const {
  return member_nodes_.size();
}
inline void relation::clear_member_nodes() {
  member_nodes_.Clear();
}
inline const ::osm::node& relation::member_nodes(int index) const {
  return member_nodes_.Get(index);
}
inline ::osm::node* relation::mutable_member_nodes(int index) {
  return member_nodes_.Mutable(index);
}
inline ::osm::node* relation::add_member_nodes() {
  return member_nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::osm::node >&
relation::member_nodes() const {
  return member_nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::osm::node >*
relation::mutable_member_nodes() {
  return &member_nodes_;
}

// repeated .osm.way member_ways = 13;
inline int relation::member_ways_size() const {
  return member_ways_.size();
}
inline void relation::clear_member_ways() {
  member_ways_.Clear();
}
inline const ::osm::way& relation::member_ways(int index) const {
  return member_ways_.Get(index);
}
inline ::osm::way* relation::mutable_member_ways(int index) {
  return member_ways_.Mutable(index);
}
inline ::osm::way* relation::add_member_ways() {
  return member_ways_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::osm::way >&
relation::member_ways() const {
  return member_ways_;
}
inline ::google::protobuf::RepeatedPtrField< ::osm::way >*
relation::mutable_member_ways() {
  return &member_ways_;
}

// repeated .osm.role node_roles = 14;
inline int relation::node_roles_size() const {
  return node_roles_.size();
}
inline void relation::clear_node_roles() {
  node_roles_.Clear();
}
inline const ::osm::role& relation::node_roles(int index) const {
  return node_roles_.Get(index);
}
inline ::osm::role* relation::mutable_node_roles(int index) {
  return node_roles_.Mutable(index);
}
inline ::osm::role* relation::add_node_roles() {
  return node_roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::osm::role >&
relation::node_roles() const {
  return node_roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::osm::role >*
relation::mutable_node_roles() {
  return &node_roles_;
}

// repeated .osm.role way_roles = 15;
inline int relation::way_roles_size() const {
  return way_roles_.size();
}
inline void relation::clear_way_roles() {
  way_roles_.Clear();
}
inline const ::osm::role& relation::way_roles(int index) const {
  return way_roles_.Get(index);
}
inline ::osm::role* relation::mutable_way_roles(int index) {
  return way_roles_.Mutable(index);
}
inline ::osm::role* relation::add_way_roles() {
  return way_roles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::osm::role >&
relation::way_roles() const {
  return way_roles_;
}
inline ::google::protobuf::RepeatedPtrField< ::osm::role >*
relation::mutable_way_roles() {
  return &way_roles_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace osm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_osm_2eproto__INCLUDED
