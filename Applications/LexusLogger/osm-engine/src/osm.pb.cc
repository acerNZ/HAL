// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "osm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace osm {

namespace {

const ::google::protobuf::Descriptor* bounds_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bounds_reflection_ = NULL;
const ::google::protobuf::Descriptor* tag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tag_reflection_ = NULL;
const ::google::protobuf::Descriptor* node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  node_reflection_ = NULL;
const ::google::protobuf::Descriptor* way_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  way_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_reflection_ = NULL;
const ::google::protobuf::Descriptor* relation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  relation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_osm_2eproto() {
  protobuf_AddDesc_osm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "osm.proto");
  GOOGLE_CHECK(file != NULL);
  bounds_descriptor_ = file->message_type(0);
  static const int bounds_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bounds, minlat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bounds, minlon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bounds, maxlat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bounds, maxlon_),
  };
  bounds_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bounds_descriptor_,
      bounds::default_instance_,
      bounds_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bounds, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bounds, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bounds));
  tag_descriptor_ = file->message_type(1);
  static const int tag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tag, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tag, val_),
  };
  tag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tag_descriptor_,
      tag::default_instance_,
      tag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tag));
  node_descriptor_ = file->message_type(2);
  static const int node_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, alt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, changeset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, tags_),
  };
  node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      node_descriptor_,
      node::default_instance_,
      node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(node));
  way_descriptor_ = file->message_type(3);
  static const int way_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(way, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(way, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(way, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(way, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(way, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(way, changeset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(way, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(way, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(way, tags_),
  };
  way_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      way_descriptor_,
      way::default_instance_,
      way_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(way, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(way, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(way));
  role_descriptor_ = file->message_type(4);
  static const int role_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role, feature_),
  };
  role_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_descriptor_,
      role::default_instance_,
      role_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role));
  relation_descriptor_ = file->message_type(5);
  static const int relation_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation, changeset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation, member_nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation, member_ways_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation, node_roles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation, way_roles_),
  };
  relation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      relation_descriptor_,
      relation::default_instance_,
      relation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(relation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(relation));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_osm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bounds_descriptor_, &bounds::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tag_descriptor_, &tag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    node_descriptor_, &node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    way_descriptor_, &way::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_descriptor_, &role::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    relation_descriptor_, &relation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_osm_2eproto() {
  delete bounds::default_instance_;
  delete bounds_reflection_;
  delete tag::default_instance_;
  delete tag_reflection_;
  delete node::default_instance_;
  delete node_reflection_;
  delete way::default_instance_;
  delete way_reflection_;
  delete role::default_instance_;
  delete role_reflection_;
  delete relation::default_instance_;
  delete relation_reflection_;
}

void protobuf_AddDesc_osm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tosm.proto\022\003osm\"H\n\006bounds\022\016\n\006minlat\030\001 \002"
    "(\001\022\016\n\006minlon\030\002 \002(\001\022\016\n\006maxlat\030\003 \002(\001\022\016\n\006ma"
    "xlon\030\004 \002(\001\"\037\n\003tag\022\013\n\003key\030\001 \002(\t\022\013\n\003val\030\002 "
    "\002(\t\"\264\001\n\004node\022\n\n\002id\030\001 \002(\005\022\013\n\003lat\030\002 \002(\001\022\013\n"
    "\003lon\030\003 \002(\001\022\013\n\003alt\030\004 \001(\001\022\014\n\004user\030\005 \001(\t\022\013\n"
    "\003uid\030\006 \001(\005\022\017\n\007visible\030\007 \001(\010\022\017\n\007version\030\010"
    " \001(\005\022\021\n\tchangeset\030\t \001(\005\022\021\n\ttimestamp\030\n \001"
    "(\t\022\026\n\004tags\030\013 \003(\0132\010.osm.tag\"\233\001\n\003way\022\n\n\002id"
    "\030\001 \002(\005\022\014\n\004user\030\005 \001(\t\022\013\n\003uid\030\006 \001(\005\022\017\n\007vis"
    "ible\030\007 \001(\010\022\017\n\007version\030\010 \001(\005\022\021\n\tchangeset"
    "\030\t \001(\005\022\021\n\ttimestamp\030\n \001(\t\022\r\n\005nodes\030\013 \003(\005"
    "\022\026\n\004tags\030\014 \003(\0132\010.osm.tag\"#\n\004role\022\n\n\002id\030\001"
    " \002(\005\022\017\n\007feature\030\002 \002(\t\"\216\002\n\010relation\022\n\n\002id"
    "\030\001 \002(\005\022\014\n\004user\030\005 \001(\t\022\013\n\003uid\030\006 \001(\005\022\017\n\007vis"
    "ible\030\007 \001(\010\022\017\n\007version\030\010 \001(\005\022\021\n\tchangeset"
    "\030\t \001(\005\022\021\n\ttimestamp\030\n \001(\t\022\026\n\004tags\030\013 \003(\0132"
    "\010.osm.tag\022\037\n\014member_nodes\030\014 \003(\0132\t.osm.no"
    "de\022\035\n\013member_ways\030\r \003(\0132\010.osm.way\022\035\n\nnod"
    "e_roles\030\016 \003(\0132\t.osm.role\022\034\n\tway_roles\030\017 "
    "\003(\0132\t.osm.role", 774);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "osm.proto", &protobuf_RegisterTypes);
  bounds::default_instance_ = new bounds();
  tag::default_instance_ = new tag();
  node::default_instance_ = new node();
  way::default_instance_ = new way();
  role::default_instance_ = new role();
  relation::default_instance_ = new relation();
  bounds::default_instance_->InitAsDefaultInstance();
  tag::default_instance_->InitAsDefaultInstance();
  node::default_instance_->InitAsDefaultInstance();
  way::default_instance_->InitAsDefaultInstance();
  role::default_instance_->InitAsDefaultInstance();
  relation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_osm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_osm_2eproto {
  StaticDescriptorInitializer_osm_2eproto() {
    protobuf_AddDesc_osm_2eproto();
  }
} static_descriptor_initializer_osm_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int bounds::kMinlatFieldNumber;
const int bounds::kMinlonFieldNumber;
const int bounds::kMaxlatFieldNumber;
const int bounds::kMaxlonFieldNumber;
#endif  // !_MSC_VER

bounds::bounds()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bounds::InitAsDefaultInstance() {
}

bounds::bounds(const bounds& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bounds::SharedCtor() {
  _cached_size_ = 0;
  minlat_ = 0;
  minlon_ = 0;
  maxlat_ = 0;
  maxlon_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bounds::~bounds() {
  SharedDtor();
}

void bounds::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bounds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bounds::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bounds_descriptor_;
}

const bounds& bounds::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osm_2eproto();
  return *default_instance_;
}

bounds* bounds::default_instance_ = NULL;

bounds* bounds::New() const {
  return new bounds;
}

void bounds::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    minlat_ = 0;
    minlon_ = 0;
    maxlat_ = 0;
    maxlon_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bounds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double minlat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minlat_)));
          set_has_minlat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_minlon;
        break;
      }

      // required double minlon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minlon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minlon_)));
          set_has_minlon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_maxlat;
        break;
      }

      // required double maxlat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxlat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxlat_)));
          set_has_maxlat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_maxlon;
        break;
      }

      // required double maxlon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxlon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxlon_)));
          set_has_maxlon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bounds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double minlat = 1;
  if (has_minlat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->minlat(), output);
  }

  // required double minlon = 2;
  if (has_minlon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->minlon(), output);
  }

  // required double maxlat = 3;
  if (has_maxlat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->maxlat(), output);
  }

  // required double maxlon = 4;
  if (has_maxlon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->maxlon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bounds::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double minlat = 1;
  if (has_minlat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->minlat(), target);
  }

  // required double minlon = 2;
  if (has_minlon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->minlon(), target);
  }

  // required double maxlat = 3;
  if (has_maxlat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->maxlat(), target);
  }

  // required double maxlon = 4;
  if (has_maxlon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->maxlon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bounds::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double minlat = 1;
    if (has_minlat()) {
      total_size += 1 + 8;
    }

    // required double minlon = 2;
    if (has_minlon()) {
      total_size += 1 + 8;
    }

    // required double maxlat = 3;
    if (has_maxlat()) {
      total_size += 1 + 8;
    }

    // required double maxlon = 4;
    if (has_maxlon()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bounds::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bounds* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bounds*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bounds::MergeFrom(const bounds& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minlat()) {
      set_minlat(from.minlat());
    }
    if (from.has_minlon()) {
      set_minlon(from.minlon());
    }
    if (from.has_maxlat()) {
      set_maxlat(from.maxlat());
    }
    if (from.has_maxlon()) {
      set_maxlon(from.maxlon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bounds::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bounds::CopyFrom(const bounds& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bounds::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void bounds::Swap(bounds* other) {
  if (other != this) {
    std::swap(minlat_, other->minlat_);
    std::swap(minlon_, other->minlon_);
    std::swap(maxlat_, other->maxlat_);
    std::swap(maxlon_, other->maxlon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bounds::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bounds_descriptor_;
  metadata.reflection = bounds_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tag::kKeyFieldNumber;
const int tag::kValFieldNumber;
#endif  // !_MSC_VER

tag::tag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tag::InitAsDefaultInstance() {
}

tag::tag(const tag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tag::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tag::~tag() {
  SharedDtor();
}

void tag::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (this != default_instance_) {
  }
}

void tag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tag_descriptor_;
}

const tag& tag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osm_2eproto();
  return *default_instance_;
}

tag* tag::default_instance_ = NULL;

tag* tag::New() const {
  return new tag;
}

void tag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_val()) {
      if (val_ != &::google::protobuf::internal::kEmptyString) {
        val_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_val;
        break;
      }

      // required string val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->val().data(), this->val().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tag::MergeFrom(const tag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tag::CopyFrom(const tag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void tag::Swap(tag* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tag_descriptor_;
  metadata.reflection = tag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int node::kIdFieldNumber;
const int node::kLatFieldNumber;
const int node::kLonFieldNumber;
const int node::kAltFieldNumber;
const int node::kUserFieldNumber;
const int node::kUidFieldNumber;
const int node::kVisibleFieldNumber;
const int node::kVersionFieldNumber;
const int node::kChangesetFieldNumber;
const int node::kTimestampFieldNumber;
const int node::kTagsFieldNumber;
#endif  // !_MSC_VER

node::node()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void node::InitAsDefaultInstance() {
}

node::node(const node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void node::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  lat_ = 0;
  lon_ = 0;
  alt_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = 0;
  visible_ = false;
  version_ = 0;
  changeset_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

node::~node() {
  SharedDtor();
}

void node::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return node_descriptor_;
}

const node& node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osm_2eproto();
  return *default_instance_;
}

node* node::default_instance_ = NULL;

node* node::New() const {
  return new node;
}

void node::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    lat_ = 0;
    lon_ = 0;
    alt_ = 0;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    uid_ = 0;
    visible_ = false;
    version_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    changeset_ = 0;
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_lat;
        break;
      }

      // required double lat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_lon;
        break;
      }

      // required double lon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_alt;
        break;
      }

      // optional double alt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional string user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uid;
        break;
      }

      // optional int32 uid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_visible;
        break;
      }

      // optional bool visible = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_version;
        break;
      }

      // optional int32 version = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_changeset;
        break;
      }

      // optional int32 changeset = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changeset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changeset_)));
          set_has_changeset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tags;
        break;
      }

      // repeated .osm.tag tags = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required double lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // required double lon = 3;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lon(), output);
  }

  // optional double alt = 4;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->alt(), output);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user(), output);
  }

  // optional int32 uid = 6;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->uid(), output);
  }

  // optional bool visible = 7;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->visible(), output);
  }

  // optional int32 version = 8;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->version(), output);
  }

  // optional int32 changeset = 9;
  if (has_changeset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->changeset(), output);
  }

  // optional string timestamp = 10;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->timestamp(), output);
  }

  // repeated .osm.tag tags = 11;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->tags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required double lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // required double lon = 3;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lon(), target);
  }

  // optional double alt = 4;
  if (has_alt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->alt(), target);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }

  // optional int32 uid = 6;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->uid(), target);
  }

  // optional bool visible = 7;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->visible(), target);
  }

  // optional int32 version = 8;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->version(), target);
  }

  // optional int32 changeset = 9;
  if (has_changeset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->changeset(), target);
  }

  // optional string timestamp = 10;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->timestamp(), target);
  }

  // repeated .osm.tag tags = 11;
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->tags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required double lat = 2;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // required double lon = 3;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // optional double alt = 4;
    if (has_alt()) {
      total_size += 1 + 8;
    }

    // optional string user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional int32 uid = 6;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional bool visible = 7;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional int32 version = 8;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 changeset = 9;
    if (has_changeset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changeset());
    }

    // optional string timestamp = 10;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

  }
  // repeated .osm.tag tags = 11;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void node::MergeFrom(const node& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_changeset()) {
      set_changeset(from.changeset());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void node::CopyFrom(const node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool node::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < tags_size(); i++) {
    if (!this->tags(i).IsInitialized()) return false;
  }
  return true;
}

void node::Swap(node* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(alt_, other->alt_);
    std::swap(user_, other->user_);
    std::swap(uid_, other->uid_);
    std::swap(visible_, other->visible_);
    std::swap(version_, other->version_);
    std::swap(changeset_, other->changeset_);
    std::swap(timestamp_, other->timestamp_);
    tags_.Swap(&other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = node_descriptor_;
  metadata.reflection = node_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int way::kIdFieldNumber;
const int way::kUserFieldNumber;
const int way::kUidFieldNumber;
const int way::kVisibleFieldNumber;
const int way::kVersionFieldNumber;
const int way::kChangesetFieldNumber;
const int way::kTimestampFieldNumber;
const int way::kNodesFieldNumber;
const int way::kTagsFieldNumber;
#endif  // !_MSC_VER

way::way()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void way::InitAsDefaultInstance() {
}

way::way(const way& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void way::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = 0;
  visible_ = false;
  version_ = 0;
  changeset_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

way::~way() {
  SharedDtor();
}

void way::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void way::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* way::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return way_descriptor_;
}

const way& way::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osm_2eproto();
  return *default_instance_;
}

way* way::default_instance_ = NULL;

way* way::New() const {
  return new way;
}

void way::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    uid_ = 0;
    visible_ = false;
    version_ = 0;
    changeset_ = 0;
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  nodes_.Clear();
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool way::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional string user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uid;
        break;
      }

      // optional int32 uid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_visible;
        break;
      }

      // optional bool visible = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_version;
        break;
      }

      // optional int32 version = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_changeset;
        break;
      }

      // optional int32 changeset = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changeset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changeset_)));
          set_has_changeset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_nodes;
        break;
      }

      // repeated int32 nodes = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nodes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_nodes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nodes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_nodes;
        if (input->ExpectTag(98)) goto parse_tags;
        break;
      }

      // repeated .osm.tag tags = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_tags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void way::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user(), output);
  }

  // optional int32 uid = 6;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->uid(), output);
  }

  // optional bool visible = 7;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->visible(), output);
  }

  // optional int32 version = 8;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->version(), output);
  }

  // optional int32 changeset = 9;
  if (has_changeset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->changeset(), output);
  }

  // optional string timestamp = 10;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->timestamp(), output);
  }

  // repeated int32 nodes = 11;
  for (int i = 0; i < this->nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->nodes(i), output);
  }

  // repeated .osm.tag tags = 12;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->tags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* way::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }

  // optional int32 uid = 6;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->uid(), target);
  }

  // optional bool visible = 7;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->visible(), target);
  }

  // optional int32 version = 8;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->version(), target);
  }

  // optional int32 changeset = 9;
  if (has_changeset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->changeset(), target);
  }

  // optional string timestamp = 10;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->timestamp(), target);
  }

  // repeated int32 nodes = 11;
  for (int i = 0; i < this->nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->nodes(i), target);
  }

  // repeated .osm.tag tags = 12;
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->tags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int way::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional int32 uid = 6;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional bool visible = 7;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional int32 version = 8;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 changeset = 9;
    if (has_changeset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changeset());
    }

    // optional string timestamp = 10;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

  }
  // repeated int32 nodes = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->nodes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nodes(i));
    }
    total_size += 1 * this->nodes_size() + data_size;
  }

  // repeated .osm.tag tags = 12;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void way::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const way* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const way*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void way::MergeFrom(const way& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodes_.MergeFrom(from.nodes_);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_changeset()) {
      set_changeset(from.changeset());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void way::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void way::CopyFrom(const way& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool way::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < tags_size(); i++) {
    if (!this->tags(i).IsInitialized()) return false;
  }
  return true;
}

void way::Swap(way* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(user_, other->user_);
    std::swap(uid_, other->uid_);
    std::swap(visible_, other->visible_);
    std::swap(version_, other->version_);
    std::swap(changeset_, other->changeset_);
    std::swap(timestamp_, other->timestamp_);
    nodes_.Swap(&other->nodes_);
    tags_.Swap(&other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata way::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = way_descriptor_;
  metadata.reflection = way_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role::kIdFieldNumber;
const int role::kFeatureFieldNumber;
#endif  // !_MSC_VER

role::role()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role::InitAsDefaultInstance() {
}

role::role(const role& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  feature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role::~role() {
  SharedDtor();
}

void role::SharedDtor() {
  if (feature_ != &::google::protobuf::internal::kEmptyString) {
    delete feature_;
  }
  if (this != default_instance_) {
  }
}

void role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_descriptor_;
}

const role& role::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osm_2eproto();
  return *default_instance_;
}

role* role::default_instance_ = NULL;

role* role::New() const {
  return new role;
}

void role::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_feature()) {
      if (feature_ != &::google::protobuf::internal::kEmptyString) {
        feature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_feature;
        break;
      }

      // required string feature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->feature().data(), this->feature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string feature = 2;
  if (has_feature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feature().data(), this->feature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->feature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string feature = 2;
  if (has_feature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feature().data(), this->feature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->feature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string feature = 2;
    if (has_feature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role::MergeFrom(const role& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_feature()) {
      set_feature(from.feature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role::CopyFrom(const role& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void role::Swap(role* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(feature_, other->feature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_descriptor_;
  metadata.reflection = role_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int relation::kIdFieldNumber;
const int relation::kUserFieldNumber;
const int relation::kUidFieldNumber;
const int relation::kVisibleFieldNumber;
const int relation::kVersionFieldNumber;
const int relation::kChangesetFieldNumber;
const int relation::kTimestampFieldNumber;
const int relation::kTagsFieldNumber;
const int relation::kMemberNodesFieldNumber;
const int relation::kMemberWaysFieldNumber;
const int relation::kNodeRolesFieldNumber;
const int relation::kWayRolesFieldNumber;
#endif  // !_MSC_VER

relation::relation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void relation::InitAsDefaultInstance() {
}

relation::relation(const relation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void relation::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = 0;
  visible_ = false;
  version_ = 0;
  changeset_ = 0;
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

relation::~relation() {
  SharedDtor();
}

void relation::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void relation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* relation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return relation_descriptor_;
}

const relation& relation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_osm_2eproto();
  return *default_instance_;
}

relation* relation::default_instance_ = NULL;

relation* relation::New() const {
  return new relation;
}

void relation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    uid_ = 0;
    visible_ = false;
    version_ = 0;
    changeset_ = 0;
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
  }
  tags_.Clear();
  member_nodes_.Clear();
  member_ways_.Clear();
  node_roles_.Clear();
  way_roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool relation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional string user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uid;
        break;
      }

      // optional int32 uid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_visible;
        break;
      }

      // optional bool visible = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_version;
        break;
      }

      // optional int32 version = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_changeset;
        break;
      }

      // optional int32 changeset = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changeset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changeset_)));
          set_has_changeset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tags;
        break;
      }

      // repeated .osm.tag tags = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_tags;
        if (input->ExpectTag(98)) goto parse_member_nodes;
        break;
      }

      // repeated .osm.node member_nodes = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_member_nodes;
        if (input->ExpectTag(106)) goto parse_member_ways;
        break;
      }

      // repeated .osm.way member_ways = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_ways:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_ways()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_member_ways;
        if (input->ExpectTag(114)) goto parse_node_roles;
        break;
      }

      // repeated .osm.role node_roles = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_node_roles;
        if (input->ExpectTag(122)) goto parse_way_roles;
        break;
      }

      // repeated .osm.role way_roles = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_way_roles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_way_roles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_way_roles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void relation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user(), output);
  }

  // optional int32 uid = 6;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->uid(), output);
  }

  // optional bool visible = 7;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->visible(), output);
  }

  // optional int32 version = 8;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->version(), output);
  }

  // optional int32 changeset = 9;
  if (has_changeset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->changeset(), output);
  }

  // optional string timestamp = 10;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->timestamp(), output);
  }

  // repeated .osm.tag tags = 11;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->tags(i), output);
  }

  // repeated .osm.node member_nodes = 12;
  for (int i = 0; i < this->member_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->member_nodes(i), output);
  }

  // repeated .osm.way member_ways = 13;
  for (int i = 0; i < this->member_ways_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->member_ways(i), output);
  }

  // repeated .osm.role node_roles = 14;
  for (int i = 0; i < this->node_roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->node_roles(i), output);
  }

  // repeated .osm.role way_roles = 15;
  for (int i = 0; i < this->way_roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->way_roles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* relation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }

  // optional int32 uid = 6;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->uid(), target);
  }

  // optional bool visible = 7;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->visible(), target);
  }

  // optional int32 version = 8;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->version(), target);
  }

  // optional int32 changeset = 9;
  if (has_changeset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->changeset(), target);
  }

  // optional string timestamp = 10;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->timestamp(), target);
  }

  // repeated .osm.tag tags = 11;
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->tags(i), target);
  }

  // repeated .osm.node member_nodes = 12;
  for (int i = 0; i < this->member_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->member_nodes(i), target);
  }

  // repeated .osm.way member_ways = 13;
  for (int i = 0; i < this->member_ways_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->member_ways(i), target);
  }

  // repeated .osm.role node_roles = 14;
  for (int i = 0; i < this->node_roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->node_roles(i), target);
  }

  // repeated .osm.role way_roles = 15;
  for (int i = 0; i < this->way_roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->way_roles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int relation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional int32 uid = 6;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional bool visible = 7;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional int32 version = 8;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 changeset = 9;
    if (has_changeset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changeset());
    }

    // optional string timestamp = 10;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

  }
  // repeated .osm.tag tags = 11;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tags(i));
  }

  // repeated .osm.node member_nodes = 12;
  total_size += 1 * this->member_nodes_size();
  for (int i = 0; i < this->member_nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_nodes(i));
  }

  // repeated .osm.way member_ways = 13;
  total_size += 1 * this->member_ways_size();
  for (int i = 0; i < this->member_ways_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_ways(i));
  }

  // repeated .osm.role node_roles = 14;
  total_size += 1 * this->node_roles_size();
  for (int i = 0; i < this->node_roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_roles(i));
  }

  // repeated .osm.role way_roles = 15;
  total_size += 1 * this->way_roles_size();
  for (int i = 0; i < this->way_roles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->way_roles(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void relation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const relation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const relation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void relation::MergeFrom(const relation& from) {
  GOOGLE_CHECK_NE(&from, this);
  tags_.MergeFrom(from.tags_);
  member_nodes_.MergeFrom(from.member_nodes_);
  member_ways_.MergeFrom(from.member_ways_);
  node_roles_.MergeFrom(from.node_roles_);
  way_roles_.MergeFrom(from.way_roles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_changeset()) {
      set_changeset(from.changeset());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void relation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void relation::CopyFrom(const relation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool relation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < tags_size(); i++) {
    if (!this->tags(i).IsInitialized()) return false;
  }
  for (int i = 0; i < member_nodes_size(); i++) {
    if (!this->member_nodes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < member_ways_size(); i++) {
    if (!this->member_ways(i).IsInitialized()) return false;
  }
  for (int i = 0; i < node_roles_size(); i++) {
    if (!this->node_roles(i).IsInitialized()) return false;
  }
  for (int i = 0; i < way_roles_size(); i++) {
    if (!this->way_roles(i).IsInitialized()) return false;
  }
  return true;
}

void relation::Swap(relation* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(user_, other->user_);
    std::swap(uid_, other->uid_);
    std::swap(visible_, other->visible_);
    std::swap(version_, other->version_);
    std::swap(changeset_, other->changeset_);
    std::swap(timestamp_, other->timestamp_);
    tags_.Swap(&other->tags_);
    member_nodes_.Swap(&other->member_nodes_);
    member_ways_.Swap(&other->member_ways_);
    node_roles_.Swap(&other->node_roles_);
    way_roles_.Swap(&other->way_roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata relation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = relation_descriptor_;
  metadata.reflection = relation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace osm

// @@protoc_insertion_point(global_scope)
